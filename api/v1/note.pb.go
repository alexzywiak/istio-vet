// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/v1/note.proto

/*
Package istio_vet_v1 is a generated protocol buffer package.

It is generated from these files:
	api/v1/note.proto

It has these top-level messages:
	Info
	Note
*/
package istio_vet_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// NoteLevel indicates the severity level of the note
type NoteLevel int32

const (
	NoteLevel_INFO    NoteLevel = 0
	NoteLevel_WARNING NoteLevel = 1
	NoteLevel_ERROR   NoteLevel = 2
)

var NoteLevel_name = map[int32]string{
	0: "INFO",
	1: "WARNING",
	2: "ERROR",
}
var NoteLevel_value = map[string]int32{
	"INFO":    0,
	"WARNING": 1,
	"ERROR":   2,
}

func (x NoteLevel) String() string {
	return proto.EnumName(NoteLevel_name, int32(x))
}
func (NoteLevel) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Vetters use Info to provide their information
type Info struct {
	// Name of the vetter
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Semver string of the vetter
	Version string `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
}

func (m *Info) Reset()                    { *m = Info{} }
func (m *Info) String() string            { return proto.CompactTextString(m) }
func (*Info) ProtoMessage()               {}
func (*Info) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Info) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Info) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

// Vetters generate Notes after inspecting the mesh configuration
type Note struct {
	// MD5 checksum of the generated note
	//
	// Used as UUID for notes
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Type of the note
	//
	// Example "istio-component-mismatch", "missing-service-port-prefix"
	Type string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	// Short description of the note
	//
	// Summary may contain python template strings "${var}" which will be
	// substituted from values in Attr map described below. Summary
	// should only refer to template variables present in Attr map.
	Summary string `protobuf:"bytes,3,opt,name=summary" json:"summary,omitempty"`
	// Long description of the note
	//
	// Similar to Summary, Msg can contain python template strings "${var}" which
	// will be substituted from values in Attr map described below. Msg
	// should only refer to template variables present in Attr map.
	Msg string `protobuf:"bytes,4,opt,name=msg" json:"msg,omitempty"`
	// Severity of the note
	Level NoteLevel `protobuf:"varint,5,opt,name=level,enum=istio.vet.v1.NoteLevel" json:"level,omitempty"`
	// Map of template variables which can be used by Summary and Msg
	Attr map[string]string `protobuf:"bytes,6,rep,name=Attr" json:"Attr,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Note) Reset()                    { *m = Note{} }
func (m *Note) String() string            { return proto.CompactTextString(m) }
func (*Note) ProtoMessage()               {}
func (*Note) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Note) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Note) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Note) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

func (m *Note) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *Note) GetLevel() NoteLevel {
	if m != nil {
		return m.Level
	}
	return NoteLevel_INFO
}

func (m *Note) GetAttr() map[string]string {
	if m != nil {
		return m.Attr
	}
	return nil
}

func init() {
	proto.RegisterType((*Info)(nil), "istio.vet.v1.Info")
	proto.RegisterType((*Note)(nil), "istio.vet.v1.Note")
	proto.RegisterEnum("istio.vet.v1.NoteLevel", NoteLevel_name, NoteLevel_value)
}

func init() { proto.RegisterFile("api/v1/note.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 274 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x50, 0x4d, 0x4b, 0xc3, 0x40,
	0x14, 0x74, 0xd3, 0x4d, 0x6b, 0x5e, 0xa5, 0xc4, 0x87, 0xe0, 0x22, 0x1e, 0x4a, 0x4f, 0x41, 0xe8,
	0xf6, 0xc3, 0x83, 0xe2, 0xad, 0x87, 0x2a, 0x01, 0x49, 0x61, 0x2f, 0x9e, 0x23, 0x5d, 0x65, 0x31,
	0xc9, 0x86, 0x64, 0xbb, 0x90, 0x7f, 0xed, 0x4f, 0x90, 0x4d, 0xd2, 0x22, 0xf4, 0x36, 0x33, 0x6f,
	0xf6, 0xcd, 0xec, 0x83, 0xeb, 0xb4, 0x54, 0x0b, 0xbb, 0x5a, 0x14, 0xda, 0x48, 0x5e, 0x56, 0xda,
	0x68, 0xbc, 0x52, 0xb5, 0x51, 0x9a, 0x5b, 0x69, 0xb8, 0x5d, 0xcd, 0x96, 0x40, 0xe3, 0xe2, 0x4b,
	0xe3, 0x04, 0x3c, 0xb5, 0x67, 0x64, 0x4a, 0xa2, 0x40, 0x78, 0x6a, 0x8f, 0x0c, 0x46, 0x56, 0x56,
	0xb5, 0xd2, 0x05, 0xf3, 0x5a, 0xf1, 0x48, 0x67, 0xbf, 0x04, 0x68, 0xa2, 0x8d, 0x3c, 0x7b, 0x82,
	0x40, 0x4d, 0x53, 0xca, 0xde, 0xdf, 0x62, 0xb7, 0xa6, 0x3e, 0xe4, 0x79, 0x5a, 0x35, 0x6c, 0xd0,
	0xad, 0xe9, 0x29, 0x86, 0x30, 0xc8, 0xeb, 0x6f, 0x46, 0x5b, 0xd5, 0x41, 0x9c, 0x83, 0x9f, 0x49,
	0x2b, 0x33, 0xe6, 0x4f, 0x49, 0x34, 0x59, 0xdf, 0xf2, 0xff, 0x45, 0xb9, 0x8b, 0x7c, 0x77, 0x63,
	0xd1, 0xb9, 0x70, 0x09, 0x74, 0x63, 0x4c, 0xc5, 0x86, 0xd3, 0x41, 0x34, 0x5e, 0xdf, 0x9f, 0xbb,
	0xb9, 0x1b, 0x6f, 0x0b, 0x53, 0x35, 0xa2, 0x75, 0xde, 0x3d, 0x41, 0x70, 0x92, 0x5c, 0xfe, 0x8f,
	0x6c, 0xfa, 0xfa, 0x0e, 0xe2, 0x0d, 0xf8, 0x36, 0xcd, 0x0e, 0xc7, 0x0f, 0x74, 0xe4, 0xc5, 0x7b,
	0x26, 0x0f, 0x73, 0x08, 0x4e, 0xf1, 0x78, 0x09, 0x34, 0x4e, 0x5e, 0x77, 0xe1, 0x05, 0x8e, 0x61,
	0xf4, 0xb1, 0x11, 0x49, 0x9c, 0xbc, 0x85, 0x04, 0x03, 0xf0, 0xb7, 0x42, 0xec, 0x44, 0xe8, 0x7d,
	0x0e, 0xdb, 0x43, 0x3f, 0xfe, 0x05, 0x00, 0x00, 0xff, 0xff, 0x88, 0xe5, 0x10, 0x8e, 0x7d, 0x01,
	0x00, 0x00,
}
